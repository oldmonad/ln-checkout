// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: payment.sql

package queries

import (
	"context"
	"database/sql"
)

const createPaymentLink = `-- name: CreatePaymentLink :one
INSERT INTO PAYMENT_LINKS (
  DESCRIPTION,
  AMOUNT,
  REFERENCE
)VALUES (
  $1,
  $2,
  $3
) RETURNING id, description, amount, reference, status, created_at
`

type CreatePaymentLinkParams struct {
	Description string
	Amount      sql.NullString
	Reference   sql.NullString
}

func (q *Queries) CreatePaymentLink(ctx context.Context, arg CreatePaymentLinkParams) (PaymentLink, error) {
	row := q.db.QueryRowContext(ctx, createPaymentLink, arg.Description, arg.Amount, arg.Reference)
	var i PaymentLink
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.Reference,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getPaymentLink = `-- name: GetPaymentLink :one
SELECT id, description, amount, reference, status, created_at FROM PAYMENT_LINKS
WHERE reference = $1 LIMIT 1
`

func (q *Queries) GetPaymentLink(ctx context.Context, reference sql.NullString) (PaymentLink, error) {
	row := q.db.QueryRowContext(ctx, getPaymentLink, reference)
	var i PaymentLink
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Amount,
		&i.Reference,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
